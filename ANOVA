{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e94388c4",
   "metadata": {},
   "source": [
    "## Population Proportion Test\n",
    "\n",
    "Population Proportion is the share of a population that belongs to particular community and we use when the oucome is dichotomous(Success or Failure). It will comapare the proportion of a Success (P-hat or P) in a single  population with known population ($P_0$).\n",
    "\n",
    "**Ex-** Share of Nobel Prize winners that are women is 50%.\n",
    "\n",
    "This test will assess wheather or not the proportion of women represents the true proportion from the entire population. The P-hat is the ratio of Success(x) to the sample size(n).\n",
    "\n",
    "**P-hat = x/n**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aca7f33d",
   "metadata": {},
   "source": [
    "**Standard Deviation and Z-score for Test of proportion** \n",
    "\n",
    "**Standard deviation (σ)** of the sampling distribution\t\n",
    "\n",
    "**σ = sqrt[ P0 * ( 1 - P0 ) / n ]**, where P0 is the hypothesized value of population proportion in the null hypothesis, and n is the sample size.\n",
    "\n",
    "**Test statistic:** It is a z-score (z) defined by the following equation.\n",
    "\n",
    "**z = (P - P0) / σ**, where P0 is the hypothesized value of population proportion in the null hypothesis, P is the sample proportion (sometimes referred to as P-hat), and σ is the standard deviation of the sampling distribution."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe9dc4be",
   "metadata": {},
   "source": [
    "### One-Sample Proportion Test\n",
    "\n",
    "**Steps:**\n",
    "\n",
    "1. Frame the null hypothesis H0 and the alternative hypothesis H1.\n",
    "2. Calculate the test statistic:\n",
    "\n",
    "     **Z = (P-P0)/sqrt(P0(1-P0)/n)**, where P0 is the null hypothesized proportion i.e., when H0: P=P0, P-hat is the sample proportion.\n",
    "     \n",
    "\n",
    "3. Determine the critical region.\n",
    "4. Make a decision. Determine if the test statistic falls in the critical region. If it does, reject the null hypothesis. If it does not, do not reject the null hypothesis.\n",
    "\n",
    "OR\n",
    "\n",
    "**Determine P-Value, If the p-value < α,  then reject H0; otherwise do not reject H0.!**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15b1823f",
   "metadata": {},
   "source": [
    "**Example**\n",
    "\n",
    "A marketing manager wants to introduce a new product. A blind comparison test is made with a sample size of 200 to assess customer acceptance of the product. The product will be launched only if favorable response is 30% plus. The product found favor with 64 respondents. Should the product be launched? \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c7e3c52c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Framing Hypothesis\n",
    "\n",
    "# H0: Favourable respponse >= 0.30\n",
    "# H1: Favourable responce < 0.30"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "e846d6fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0324037034920393"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "P0 = 0.30   # Population proportion\n",
    "P = 64/200  # Sample proportion or P-hat\n",
    "n = 200\n",
    "prop_diff = P-P0\n",
    "var = ((P0*(1-P0)/n))**0.5   # splitting calculation to make it easier\n",
    "var"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "0954dc68",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6172133998483683"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Zstats = prop_diff/var\n",
    "Zstats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "1c39a658",
   "metadata": {},
   "outputs": [],
   "source": [
    "# At 5% significant level, we have Zcritical is 1.65 and Zstats < Zcritical, Hence, We fail to reject the Null Hypothesis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "257eead5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.2685469892213206"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's do this with Pvalue approach\n",
    "from scipy import stats\n",
    "prop = stats.norm.cdf(abs(Zstats)) # It will return the proportion of Zstats distribution\n",
    "PValue = 1-prop # It will return the PValue or proportion which decide the rejection or fail to reject\n",
    "PValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "92c3ad49",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Since, PValue is greater than 5% level of significance, Hence, we fail to reject the null hypothesis."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3419f4d5",
   "metadata": {},
   "source": [
    "### Two-Sample Z Proportion Test\n",
    "\n",
    "It assumes the two samples as an independent and it will compare the proportions of successes between the two groups. The sample size in each comparison group (n1 and n2) and the sample proportions (P1-hat and P2-hat) which are computed by taking the ratio of the numbers of successes (x1 and x2) to the sample sizes in each group, i.e.,\n",
    "\n",
    "Sample proportion of one sample **P1 = x1/n1** and for other sample **P2 = x2/n2**\n",
    "\n",
    "**Test-Statistics = (P1-P2)/sqrt(P(1-P)*(1/n1+1/n2))**, where\n",
    "\n",
    "**P = (x1+x2)/(n1+n2)**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86e5a337",
   "metadata": {},
   "source": [
    "**Example**\n",
    "\n",
    "A survey indicate that of 900 women randomly sampled, 345 use smartphones. For the men, 450 of the 1025 who were randomly sampled use smartphones. Test whether a percentage of women who uses smartphone is less than men. Use α=0.05."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "75d88be6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.412987012987013, 0.022491800967444995)"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n1 = 900\n",
    "x1 = 345\n",
    "P1 = 345/900   # proportion of women  \n",
    "\n",
    "n2 = 1025\n",
    "x2 = 450\n",
    "P2 = 450/1025  # proportion of men\n",
    "\n",
    "P = (x1+x2)/(n1+n2)\n",
    "var = (P*(1-P)*(1/n1+1/n2))**0.5\n",
    "P,var"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "4cdb2d2b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Framing Hypothesis\n",
    "\n",
    "# H0: proportion of women randomly sample is equal to the proportion of men randomly sample i.e. P1 = P2\n",
    "# H1: Propoetions of women is less than the men. P1 < P2, Hence, It is left-tail test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "6be24a5c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-2.4760603648937334"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Zstats = (P1-P2)/var\n",
    "Zstats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "39043a0a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.006642055794873758"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prop = stats.norm.cdf(abs(Zstats)) # It will return the proportion of Zstats distribution\n",
    "PValue = 1-prop # It will return the PValue or proportion which decide the rejection or fail to reject\n",
    "PValue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "e8d8bfca",
   "metadata": {},
   "outputs": [],
   "source": [
    "# We know that, At 5% level of significance, Zcritical for left-tail test is -1.65, Since, Zstats is less than than the\n",
    "# Zcitical value and Pvalue is also less than 5% meaning that it is out of the Confidence range, Hence, we reject the \n",
    "# null Hypothesis."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ffc11211",
   "metadata": {},
   "source": [
    "## Analysis of variance (ANOVA)\n",
    "\n",
    "ANOVA is a hypothesis testing technique which tests the equality or significan differences of two or more population's mean by examining the variances of samples that are taken. It tests the general rather than specific differences among means. \n",
    "\n",
    "Consider three populations with means µ1, µ2, µ3 respectively. Using sample results we can set up the following NULL and ALTERNATE hypotheses.\n",
    "\n",
    "If µ1, µ2, µ3 are means three populations then\n",
    "\n",
    "\tH0 : µ1 = µ2 =µ3 \n",
    "\tHa : µ1 ≠ µ2 ≠ µ3 \n",
    "    \n",
    " ANOVA is used to determine whether the observed differences in the sample means are large enough to reject the NULL hypothesis.\n",
    "* Sample means are close together when they come from one population when H0 is true.\n",
    "* Sample means are  not close together when they come from different populations when H0 is not true.\n",
    "\n",
    "### Assumptions of ANOVA\n",
    "\n",
    "* 1) All populations involved follow a normal distribution.\n",
    "* 2) All populations have the same variance.\n",
    "* 3) The samples are randomly selected and independent of one-another.\n",
    "\n",
    "### Concepts\n",
    "\n",
    "Consider 3 populations with means µ1, µ2, µ3 respectively and we have drawn one sample of size n from each.\n",
    "* If the means of the three populations are equal, we would expect sample means to be close together. \n",
    "* More the sample means differ more is the evidence that sample means differ.\n",
    "* In other words if variability amongst the sample means is small it supports NULL hypothesis, otherwise it supports H1.\n",
    "* If null hypothesis is true, then we can consider that each sample came from same normal distribution. In this case mean and variance would be \n",
    "* $\\mu$ = (µ1+µ2+µ3) and Var ($\\sigma^2$) = n($\\sigma_x$)\n",
    "* This is called between treatments estimate.\n",
    "\n",
    "* When H0 is false, we have three sampling distributions. The means are not close together and the variance ($S^2$) will be larger causing ($\\sigma^2$) to be larger.\n",
    "* In this case the pooled variance estimate is applied. Therefore \n",
    "* Var ($\\sigma^2$) = ($s_x^2$ + $s_x^2$ + $s_x^2$ )/3\n",
    "* This is called within treatments estimate.\n",
    "\n",
    "* The ratio of between treatments estimate to within treatment estimate is called F ratio.\n",
    "* Larger the F ratio or F value, more is evidence that the populations differ. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78b32367",
   "metadata": {},
   "source": [
    "## One Way ANOVA\n",
    "\n",
    "### Example 1\n",
    "\n",
    "Consider the monthly income of members from three different gyms - fitness centers given below:\n",
    "* Gym 1 (n = 22): [60, 66, 65, 55, 62, 70, 51, 72, 58, 61, 71, 41, 70, 57, 55, 63, 64, 76, 74, 54, 58, 73]\n",
    "* Gym 2 (n = 18): [56, 65, 65, 63, 57, 47, 72, 56, 52, 75, 66, 62, 68, 75, 60, 73, 63, 64]\n",
    "* Gym 3 (n = 23): [67, 56, 65, 61, 63, 59, 42, 53, 63, 65, 60, 57, 62, 70, 73, 63, 55, 52, 58, 68, 70, 72, 45]  \n",
    "Using ANOVA, test whether the mean monthly income is equal for each Gym."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "0d62de63",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "eaa6bd8d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Count, Mean and standard deviation of monthly income of members of Gym 1:  22, 62.55 and 8.67\n",
      "Count, Mean and standard deviation of monthly income of members of Gym 2:  18, 63.28 and 7.79\n",
      "Count, Mean and standard deviation of monthly income of members of Gym 3:  23, 60.83 and 8.00\n"
     ]
    }
   ],
   "source": [
    "Gym_1 = np.array([60, 66, 65, 55, 62, 70, 51, 72, 58, 61, 71, 41, 70, 57, 55, 63, 64, 76, 74, 54, 58, 73])\n",
    "Gym_2 = np.array([56, 65, 65, 63, 57, 47, 72, 56, 52, 75, 66, 62, 68, 75, 60, 73, 63, 64])\n",
    "Gym_3 = np.array([67, 56, 65, 61, 63, 59, 42, 53, 63, 65, 60, 57, 62, 70, 73, 63, 55, 52, 58, 68, 70, 72, 45])  \n",
    "\n",
    "print('Count, Mean and standard deviation of monthly income of members of Gym 1: %3d, %3.2f and %3.2f' % (len(Gym_1), Gym_1.mean(),np.std(Gym_1,ddof =1)))\n",
    "print('Count, Mean and standard deviation of monthly income of members of Gym 2: %3d, %3.2f and %3.2f' % (len(Gym_2), Gym_2.mean(),np.std(Gym_2,ddof =1)))\n",
    "print('Count, Mean and standard deviation of monthly income of members of Gym 3: %3d, %3.2f and %3.2f' % (len(Gym_3), Gym_3.mean(),np.std(Gym_3,ddof =1)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "e0886f4b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gym</th>\n",
       "      <th>Monthly_inc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>3</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>3</td>\n",
       "      <td>68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>3</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>3</td>\n",
       "      <td>72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>3</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>63 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Gym  Monthly_inc\n",
       "0    1           60\n",
       "1    1           66\n",
       "2    1           65\n",
       "3    1           55\n",
       "4    1           62\n",
       "..  ..          ...\n",
       "18   3           58\n",
       "19   3           68\n",
       "20   3           70\n",
       "21   3           72\n",
       "22   3           45\n",
       "\n",
       "[63 rows x 2 columns]"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Creating DataFRame to store our data\n",
    "monthly_inc = pd.DataFrame()\n",
    "\n",
    "df1 = pd.DataFrame({'Gym': '1', 'Monthly_inc':Gym_1})\n",
    "df2 = pd.DataFrame({'Gym': '2', 'Monthly_inc':Gym_2})\n",
    "df3 = pd.DataFrame({'Gym': '3', 'Monthly_inc':Gym_3})\n",
    "\n",
    "monthly_inc = monthly_inc.append(df1) \n",
    "monthly_inc = monthly_inc.append(df2) \n",
    "monthly_inc = monthly_inc.append(df3) \n",
    "monthly_inc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d35a90fd",
   "metadata": {},
   "source": [
    "### Step 1: State the null and alternative hypothesis:\n",
    "\n",
    "* $H_0$: $\\mu1$ = $\\mu2$ = $\\mu3$\n",
    "* $H_A$: At least one $\\mu$ differs "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba6ad8af",
   "metadata": {},
   "source": [
    "### Step 2: Decide the significance level\n",
    "\n",
    "Here we select $\\alpha$ = 0.05 "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61105495",
   "metadata": {},
   "source": [
    "### Step 3: Identify the test statistic\n",
    "\n",
    "Here we have three groups. Analysis of variance can determine whether the means of three or more groups are different. ANOVA uses F-tests to statistically test the equality of means."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "715a371b",
   "metadata": {},
   "source": [
    "### Step 4: Calculate F, a test statistic\n",
    "\n",
    "* **scipy.stats.f.ppf** gives the critical value at a given level of confidence with a pair of degrees of freedom.\n",
    "* **scipy.stats.f.cdf** gives the cumulative distribution function for the given random variable - given the calculated F value at a given level of confidence with a pair of degrees of freedom. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9b554155",
   "metadata": {},
   "outputs": [],
   "source": [
    "# In annova , we have two types of degrees of freedom\n",
    "# one is degrees of freedom within (n-k), where k is the number of categories\n",
    "# other is degrees of freedom between (n-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6c932301",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ca866922",
   "metadata": {},
   "outputs": [],
   "source": [
    "import scipy.stats as stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "46fc5dcc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F Critical value for 2 and 60 df with 0.95 confidence 3.15\n"
     ]
    }
   ],
   "source": [
    "Fcritic = stats.f.ppf(q = 1-0.05, dfn = 2, dfd = 60)\n",
    "# q is the confidence level\n",
    "# dfn = degree of freedom of n groups which is equal to n-1 i.e 3-1 = 2\n",
    "# dfd = degree of freedom of total no. of records in each group which is equal to (k1-1+ k2-1+ k3-1) i.e 22-1 + 18-1 + 23-1\n",
    "#                                                                                = 21 + 17 + 22 = 60\n",
    "print('F Critical value for 2 and 60 df with 0.95 confidence %3.2f' %Fcritic)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "fa98eb81",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P value for 2 and 60 df with .95 confidence for the calculated F value 0.61079\n"
     ]
    }
   ],
   "source": [
    "## Or calculate P-Value\n",
    "\n",
    "p_value = 1 -stats.f.cdf(0.497075, dfn = 2, dfd = 60)\n",
    "print('P value for 2 and 60 df with .95 confidence for the calculated F value %3.5f' % p_value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "8da2eef0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            df       sum_sq    mean_sq         F   PR(>F)\n",
      "Gym        2.0    66.614123  33.307061  0.497075  0.61079\n",
      "Residual  60.0  4020.370004  67.006167       NaN      NaN\n"
     ]
    }
   ],
   "source": [
    "import statsmodels.api as sm\n",
    "from statsmodels.formula.api import ols\n",
    " \n",
    "mod = ols('Monthly_inc ~ Gym', data = monthly_inc).fit()\n",
    "aov_table = sm.stats.anova_lm(mod)\n",
    "print(aov_table)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a424f760",
   "metadata": {},
   "source": [
    "* statsmodels.formula.api.ols creates a model from a formula and dataframe\n",
    "* statsmodels.api.sm.stats.anova_lm gives an Anova table for one or more fitted linear models"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "952fb17f",
   "metadata": {},
   "source": [
    "From the above table, we can see, we have fstats is 0.497075, and pvalue is 0.61079. Since, fstats is come unders Fcritical and P-Value is greater than defined 5% level of Significance, we fail to reject the Null Hypothesis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "e89087f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's see ANOVA Terminology\n",
    "\n",
    "from IPython import display\n",
    "display.Image('D:\\Python\\Anova_Terms.png')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd00beb9",
   "metadata": {},
   "source": [
    "## Two-Way ANOVA\n",
    "\n",
    "* Two-way classification is a mere extension of the one-way ANOVA. \n",
    "* You have two factors for which the population means have to be compared.\n",
    "* The testing procedure is exactly the same as One-way ANOVA except for the fact that you will be testing the population means for two factors. \n",
    "* Rows are treated as blocks and columns as treatments.\n",
    "* Two-way ANOVA is called as Randomized Block Design in experimental design parlance.\n",
    "\n",
    "**Example-**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "1f98d5bb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Loc  Dis0  Dis10  Dis20\n",
      "0     1    20     28     32\n",
      "1     2    20     19     20\n",
      "2     1    16     23     29\n",
      "3     2    21     27     31\n",
      "4     1    24     25     28\n",
      "5     2    23     23     35\n",
      "6     1    20     31     27\n",
      "7     2    19     30     25\n",
      "8     1    19     25     30\n",
      "9     2    25     25     31\n",
      "10    1    10     24     26\n",
      "11    2    22     21     31\n",
      "12    1    24     28     37\n",
      "13    2    25     33     31\n",
      "14    1    16     23     33\n",
      "15    2    21     26     23\n",
      "16    1    25     26     27\n",
      "17    2    26     22     22\n",
      "18    1    16     25     31\n",
      "19    2    22     28     32\n",
      "20    1    18     22     37\n",
      "21    2    25     24     22\n",
      "22    1    20     24     28\n",
      "23    2    23     23     29\n",
      "24    1    17     26     25\n",
      "25    2    23     26     25\n",
      "26    1    26     28     23\n",
      "27    2    24     16     34\n",
      "28    1    16     21     26\n",
      "29    2    20     30     30\n",
      "30    1    21     27     33\n",
      "31    2    23     22     25\n",
      "32    1    24     25     28\n",
      "33    2    18     16     39\n",
      "34    1    19     20     30\n",
      "35    2    19     25     32\n",
      "36    1    19     26     30\n",
      "37    2    19     34     29\n",
      "38    1    21     26     26\n",
      "39    2    30     23     22\n"
     ]
    }
   ],
   "source": [
    "table1  = [['Loc','Dis0','Dis10','Dis20'], [ 1, 20, 28, 32], [ 2, 20, 19, 20],\n",
    "  [ 1, 16, 23, 29 ],[ 2, 21, 27, 31 ],[ 1, 24, 25, 28 ],[ 2, 23, 23, 35 ],\n",
    "  [ 1, 20, 31, 27 ],[ 2, 19, 30, 25 ],[ 1, 19, 25, 30 ],[ 2, 25, 25, 31 ],\n",
    "  [ 1, 10, 24, 26 ],[ 2, 22, 21, 31 ],[ 1, 24, 28, 37 ],[ 2, 25, 33, 31 ],\n",
    "  [ 1, 16, 23, 33 ],[ 2, 21, 26, 23 ],[ 1, 25, 26, 27 ],[ 2, 26, 22, 22 ],\n",
    "  [ 1, 16, 25, 31 ],[ 2, 22, 28, 32 ],[ 1, 18, 22, 37 ],[ 2, 25, 24, 22 ],\n",
    "  [ 1, 20, 24, 28 ],[ 2, 23, 23, 29 ],[ 1, 17, 26, 25 ],[ 2, 23, 26, 25 ],\n",
    "  [ 1, 26, 28, 23 ],[ 2, 24, 16, 34 ],[ 1, 16, 21, 26 ],[ 2, 20, 30, 30 ],\n",
    "  [ 1, 21, 27, 33 ],[2, 23, 22, 25 ],[ 1, 24, 25, 28 ],[ 2, 18, 16, 39 ],\n",
    "  [ 1, 19, 20, 30 ],[ 2, 19, 25, 32 ],[ 1, 19, 26, 30 ],[ 2, 19, 34, 29 ],\n",
    "  [ 1, 21, 26, 26 ],[ 2, 30, 23, 22 ]]\n",
    "headers = table1.pop(0) # Storing very first value in headers variable\n",
    "\n",
    "# Here Loc represent different locations of shops and Dis represent discount and 0,10,20 represent percentage of Discount.\n",
    "df1 = pd.DataFrame(table1, columns=headers)\n",
    "print(df1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3729368",
   "metadata": {},
   "source": [
    "This is a two-way ANOVA with replication since the data contains values for multiple locations.\n",
    "\n",
    "Conduct a two-way ANOVA at $\\alpha$ = 5% to test the effects of discounts and location on sales."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "a499bdd4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Loc</th>\n",
       "      <th>Discount</th>\n",
       "      <th>Qty</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>2</td>\n",
       "      <td>20</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>1</td>\n",
       "      <td>20</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>2</td>\n",
       "      <td>20</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>1</td>\n",
       "      <td>20</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>2</td>\n",
       "      <td>20</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>120 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Loc Discount  Qty\n",
       "0     1        0   20\n",
       "1     2        0   20\n",
       "2     1        0   16\n",
       "3     2        0   21\n",
       "4     1        0   24\n",
       "..  ...      ...  ...\n",
       "35    2       20   32\n",
       "36    1       20   30\n",
       "37    2       20   29\n",
       "38    1       20   26\n",
       "39    2       20   22\n",
       "\n",
       "[120 rows x 3 columns]"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d0_val  = df1['Dis0'].values\n",
    "d10_val = df1['Dis10'].values\n",
    "d20_val = df1['Dis20'].values\n",
    "l_val   = df1['Loc'].values\n",
    "\n",
    "df1   = pd.DataFrame({'Loc': l_val, 'Discount':'0','Qty': d0_val})\n",
    "df2   = pd.DataFrame({'Loc': l_val, 'Discount':'10','Qty': d10_val})\n",
    "df3   = pd.DataFrame({'Loc': l_val, 'Discount':'20','Qty': d20_val})\n",
    "\n",
    "Sale_qty_df = pd.DataFrame()\n",
    "\n",
    "Sale_qty_df = Sale_qty_df.append(df1) \n",
    "Sale_qty_df = Sale_qty_df.append(df2) \n",
    "Sale_qty_df = Sale_qty_df.append(df3) \n",
    "\n",
    "data = pd.DataFrame(Sale_qty_df)\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "2705670d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# LEt's check same assumptions\n",
    "\n",
    "# Normality - Shapiro Test: It is used to test the normal distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "d3f67525",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating groups with respect to Location\n",
    "SL=Sale_qty_df.groupby('Loc')\n",
    "SL1=SL.get_group(1)\n",
    "SL2=SL.get_group(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "1ea140b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.stats import shapiro,ttest_ind,f_oneway"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "868782ae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.9828364253044128, 0.5594433546066284)"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "shapiro(SL1['Qty'])  # It return the test-stats and pvalue\n",
    "\n",
    "# Framing Hypothesis\n",
    "\n",
    "# H0: Data is normal\n",
    "# H1: Data is not normal\n",
    "\n",
    "# Since, PValue is greater than 5% significant level, Hence, this group data is normal."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "1247370b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.9620530009269714, 0.05931038409471512)"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "shapiro(SL2['Qty'])\n",
    "\n",
    "# Since, PValue is greater than 5% significant level, Hence, this group data is normal."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "21fd42f7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ttest_indResult(statistic=-0.5144279133747314, pvalue=0.6079149958961645)"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Samples shoul be independent, so we can apply ttest of independence\n",
    "\n",
    "# Framing Hypothesis\n",
    "\n",
    "# H0: Groups are independent\n",
    "# H1: Groups are dependent\n",
    "\n",
    "ttest_ind(SL1['Qty'],SL2['Qty'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "e1ec7f61",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Since, PValue is greater than 5% significant level, Hence, this group are independent."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "587087ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "F_onewayResult(statistic=0.26463607805908296, pvalue=0.6079149958961662)"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# MEans should be equal\n",
    "\n",
    "# Framing Hypothesis\n",
    "\n",
    "# H0: means are same\n",
    "# H1: means are not same\n",
    "\n",
    "f_oneway(SL1['Qty'],SL2['Qty'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34393c62",
   "metadata": {},
   "source": [
    "### post-hoc test - Tukeyhsd Test\n",
    "\n",
    "We use this test when we are comparing the mean of three or more than three group but F_oneway anova fails the null hypothesis if mean of atleast one group is different but there might be possibility that there are two or more groups have same mean. So, In this case we use TukeyHSD test which return the table of every possible pair that they have same mean or not in terms of pvalue and according to hypothesis that we framed, we can conclude which groups have same mean."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "6422f89d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "F_onewayResult(statistic=5.167774552944481, pvalue=0.012582197136592609)"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Let enter data for three groups\n",
    "\n",
    "a = [85, 86, 88, 75, 78, 94, 98, 79, 71, 80]\n",
    "b = [91, 92, 93, 90, 97, 94, 82, 88, 95, 96]\n",
    "c = [79, 78, 88, 94, 92, 85, 83, 85, 82, 81]\n",
    "\n",
    "#perform one-way ANOVA\n",
    "f_oneway(a, b, c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "176ce34c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# In this case, when our null hypothesis gets rejected but we do not know which group have different mean. So, we use\n",
    "# Post-Hoc Test in this case."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "b8855ee8",
   "metadata": {},
   "outputs": [],
   "source": [
    "from statsmodels.stats.multicomp import pairwise_tukeyhsd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "8e82c891",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Multiple Comparison of Means - Tukey HSD, FWER=0.05 \n",
      "=====================================================\n",
      "group1 group2 meandiff p-adj   lower    upper  reject\n",
      "-----------------------------------------------------\n",
      "     a      b      8.4 0.0158   1.4272 15.3728   True\n",
      "     a      c      1.3 0.8864  -5.6728  8.2728  False\n",
      "     b      c     -7.1 0.0453 -14.0728 -0.1272   True\n",
      "-----------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "# creating dataframe to record our values\n",
    "\n",
    "df = pd.DataFrame({'score': [85, 86, 88, 75, 78, 94, 98, 79, 71, 80,\n",
    "                             91, 92, 93, 90, 97, 94, 82, 88, 95, 96,\n",
    "                             79, 78, 88, 94, 92, 85, 83, 85, 82, 81],\n",
    "                   'group': np.repeat(['a', 'b', 'c'], repeats=10)}) \n",
    "\n",
    "# perform Tukey's test\n",
    "tukey = pairwise_tukeyhsd(endog=df['score'],\n",
    "                          groups=df['group'],\n",
    "                          alpha=0.05)\n",
    "print(tukey)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c3f3f52",
   "metadata": {},
   "source": [
    "Here’s how to interpret the output:\n",
    "\n",
    "* P-value for the difference in means between a and b: .0158\n",
    "* P-value for the difference in means between a and c: .8864\n",
    "* P-value for the difference in means between b and c: .0453\n",
    "\n",
    "Thus, we would conclude that there is a statistically significant difference between the means of groups a and b and groups b and c, but not a statistically significant difference between the means of groups a and c."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "28a936e7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Since, PValue is greater than 5% significant level, Hence, this means are same."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "5d4b702b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                         sum_sq     df          F        PR(>F)\n",
      "C(Discount)         1240.316667    2.0  39.279968  1.055160e-13\n",
      "C(Loc)                 7.008333    1.0   0.443898  5.065930e-01\n",
      "C(Discount):C(Loc)    84.816667    2.0   2.686085  7.246036e-02\n",
      "Residual            1799.850000  114.0        NaN           NaN\n"
     ]
    }
   ],
   "source": [
    "# Let's create ANOVA table\n",
    "\n",
    "import statsmodels.api as sm\n",
    "from statsmodels.formula.api import ols\n",
    "from statsmodels.stats.anova import anova_lm\n",
    "\n",
    "formula = 'Qty ~ C(Discount) + C(Loc) + C(Discount):C(Loc)'\n",
    "model = ols(formula, Sale_qty_df).fit()\n",
    "aov_table = anova_lm(model, typ=2)\n",
    "\n",
    "print(aov_table)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb1dc790",
   "metadata": {},
   "source": [
    "* statsmodels.formula.api.ols creates a model from a formula and dataframe\n",
    "* statsmodels.api.sm.stats.anova_lm gives an Anova table for one or more fitted linear models\n",
    "\n",
    "In the formula. we know that \n",
    "* 1)  ~ separates the left hand side of the model from the right hand side\n",
    "* 2) + adds new columns to the design matrix\n",
    "* 3) :  adds a new column to the design matrix with the product of the other two columns\n",
    "* 4) * also adds the individual columns multiplied together along with their product\n",
    "* 5) C() operator denotes that the variable enclosed in C() will be treated explicitly as categorical variable."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "252cd63a",
   "metadata": {},
   "source": [
    "**In this example,**\n",
    "\n",
    "* p value for discount is 1.06e-13 and < 0.05 so we reject the null hypothesis (1) and conclude that the discount rate is having an effect on sales quantity.\n",
    "* p value for location is 0.5066 and > 0.05 so we retain the null hypothesis (2) and conclude that the location is not having an effect on sales quantity.\n",
    "* p value for interaction (discount:location) is 0.0725 and > 0.05 so we retain the null hypothesis (3) and conclude that the interaction (discount:location) is not having an effect on sales quantity."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6f473114",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
